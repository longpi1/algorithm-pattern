package main

/*
416. 分割等和子集
给你一个 只包含正整数 的 非空 数组 nums 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。

示例 1：
输入：nums = [1,5,11,5]
输出：true
解释：数组可以分割成 [1, 5, 5] 和 [11] 。
示例 2：
输入：nums = [1,2,3,5]
输出：false
解释：数组不能分割成两个元素和相等的子集。

*/
/*
解题思路：
01背包问题
背包问题，大家都知道，有N件物品和一个最多能背重量为W 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。每件物品只能用一次，求解将哪些物品装入背包里物品价值总和最大。

背包问题有多种背包方式，常见的有：01背包、完全背包、多重背包、分组背包和混合背包等等。

要注意题目描述中商品是不是可以重复放入。

即一个商品如果可以重复多次放入是完全背包，而只能放入一次是01背包，写法还是不一样的。

要明确本题中我们要使用的是01背包，因为元素我们只能用一次。

回归主题：首先，本题要求集合里能否出现总和为 sum / 2 的子集。

那么来一一对应一下本题，看看背包问题如何来解决。

只有确定了如下四点，才能把01背包问题套到本题上来。

背包的体积为sum / 2
背包要放入的商品（集合里的元素）重量为 元素的数值，价值也为元素的数值
背包如果正好装满，说明找到了总和为 sum / 2 的子集。
背包中每一个元素是不可重复放入。
以上分析完，我们就可以套用01背包，来解决这个问题了。

动规五部曲分析如下：

确定dp数组以及下标的含义
01背包中，dp[j] 表示： 容量为j的背包，所背的物品价值最大可以为dp[j]。

本题中每一个元素的数值既是重量，也是价值。

套到本题，dp[j]表示 背包总容量（所能装的总重量）是j，放进物品后，背的最大重量为dp[j]。

那么如果背包容量为target， dp[target]就是装满 背包之后的重量，所以 当 dp[target] == target 的时候，背包就装满了。

有录友可能想，那还有装不满的时候？

拿输入数组 [1, 5, 11, 5]，距离， dp[7] 只能等于 6，因为 只能放进 1 和 5。

而dp[6] 就可以等于6了，放进1 和 5，那么dp[6] == 6，说明背包装满了。

确定递推公式
01背包的递推公式为：dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);

本题，相当于背包里放入数值，那么物品i的重量是nums[i]，其价值也是nums[i]。

所以递推公式：dp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);

dp数组如何初始化
*/
func canPartition(nums []int) bool {
	n := len(nums)
	count := 0
	// 计算数组中所有元素的总和
	for i := 0; i < n; i++ {
		count += nums[i]
	}
	// 如果总和为奇数，则无法平分成两个子集
	if count % 2 == 0 {
		count = count / 2
	} else {
		return false
	}

	// 创建一个一维数组 dp，用于记录能够组成不同和值的子集
	dp := make([]int, count+1)

	// 遍历数组 nums 中的每个元素
	for i := 0; i < n; i++ {
		// 倒序遍历 dp 数组，从大到小更新子集的和值
		for j := count; j >= nums[i]; j-- {
			dp[j] = max3(dp[j], dp[j-nums[i]]+nums[i])
		}
	}

	// 如果 dp 数组的最后一个元素等于 count，表示可以平分成两个子集
	if dp[count] == count {
		return true
	}
	return false
}

func max3(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func main(){
	nums := []int{1,5,11,5}
	print(canPartition(nums))
}