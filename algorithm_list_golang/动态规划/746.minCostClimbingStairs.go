package main

/*
746. 使用最小花费爬楼梯
给你一个整数数组 cost ，其中 cost[i] 是从楼梯第 i 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。
你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。
请你计算并返回达到楼梯顶部的最低花费。


示例 1：
输入：cost = [10,15,20]
输出：15
解释：你将从下标为 1 的台阶开始。
- 支付 15 ，向上爬两个台阶，到达楼梯顶部。
总花费为 15 。

示例 2：
输入：cost = [1,100,1,1,1,100,1,1,100,1]
输出：6
解释：你将从下标为 0 的台阶开始。
- 支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。
- 支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。
- 支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。
- 支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。
- 支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。
- 支付 1 ，向上爬一个台阶，到达楼梯顶部。
总花费为 6 。


提示：

2 <= cost.length <= 1000
0 <= cost[i] <= 999
*/

// minCostClimbingStairs 计算爬到楼梯顶部的最小花费
// cost[i] 表示从第i个台阶向上爬的花费
// 可以选择从第0个或第1个台阶开始，每次可以爬1个或2个台阶
func minCostClimbingStairs(cost []int) int {
	// 边界情况：如果没有台阶，花费为0
	if len(cost) == 0 {
		return 0
	}

	// dp[i] 表示爬到第i个位置的最小花费
	// 注意：楼梯顶部是第len(cost)个位置（在最后一个台阶之后）
	dp := make([]int, len(cost)+1)

	// 初始状态：
	// dp[0] = 0（默认值，可以免费站在地面）
	// dp[1] = 0（可以免费站在第0个台阶）
	dp[1] = 0

	// dp[2] 表示到达第2个位置的最小花费
	// 可以从第0个台阶花费cost[0]到达，或从第1个台阶花费cost[1]到达
	dp[2] = minCost(cost[1], cost[0])

	// 状态转移：对于位置i（i >= 3）
	// 可以从位置i-2花费cost[i-2]到达，或从位置i-1花费cost[i-1]到达
	for i := 3; i <= len(cost); i++ {
		dp[i] = minCost(dp[i-2]+cost[i-2], dp[i-1]+cost[i-1])
	}

	// 返回到达楼梯顶部的最小花费
	return dp[len(cost)]
}

// minCost 返回两个整数中的较小值
func minCost(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func main() {
	cost := []int{10, 15, 20}
	minCostClimbingStairs(cost)
}
