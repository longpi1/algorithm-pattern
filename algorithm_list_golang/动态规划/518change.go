package main

import "fmt"

/*
518. 零钱兑换 II

给你一个整数数组 coins 表示不同面额的硬币，另给一个整数 amount 表示总金额。
请你计算并返回可以凑成总金额的硬币组合数。如果任何硬币组合都无法凑出总金额，返回 0 。
假设每一种面额的硬币有无限个。

题目数据保证结果符合 32 位带符号整数。

示例 1：
输入：amount = 5, coins = [1, 2, 5]
输出：4
解释：有四种方式可以凑成总金额：
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1
示例 2：
输入：amount = 3, coins = [2]
输出：0
解释：只用面额 2 的硬币不能凑成总金额 3 。
示例 3：
输入：amount = 10, coins = [10]
输出：1
*/

/*
关于背包问题的排列和组合（在排列中，元素的顺序是不同的，因此(1, 2)和(2, 1)被视为不同的排列。在组合中，元素的顺序不重要，因此(1, 2)和(2, 1)被视为相同的组合。）：
外层是物品，内层是背包则为组合，相反外层是背包，内层是物品则是排列
先遍历物品后遍历背包是这样，比如，外层循环固定coins【1】，在内层循环遍历背包时，随着背包不断增加，coins【1】可以重复被添加进来，而由于外层循环固定了，
因此coins【2】只能在下一次外层循环添加进不同大小的背包中，这么看的话，coins【i+1】只能在coins【i】之后了；如果先遍历背包后遍历物品，那么外层循环先固定背包大小j，
然后在大小为j的背包中循环遍历添加物品，然后在下次外层循环背包大小变为j+1，此时仍要执行内层循环遍历添加物品，也就会出现在上一轮外层循环中添加coins【2】的基础上还能再添加coins【1】的情况，
那么就有了coins【1】在coins【2】之后的情况了。

*/
func change(amount int, coins []int) int {
	// 定义dp数组
	dp := make([]int, amount+1)
	// 初始化,0大小的背包, 当然是不装任何东西了, 就是1种方法
	dp[0]  = 1
	// 遍历顺序
	// 遍历物品
	for i := 0 ;i < len(coins);i++ {
		// 遍历背包
		for j:= coins[i] ; j <= amount ;j++ {
			// 推导公式
			dp[j] += dp[j-coins[i]]
		}
	}
	//// 外层是背包，内层是物品则是排列
	//for  j := 0; j <= amount; j++ { // 遍历背包容量
	//	for  i := 0; i < len(coins); i++ { // 遍历物品
	//		if j - coins[i] >= 0{
	//			dp[j] += dp[j - coins[i]]
	//		}
	//
	//	}
	//}
	return dp[amount]
}


func main() {
	amount := 5
	coin := []int{1, 2, 5}
	fmt.Printf("%v",change(amount,coin))
}